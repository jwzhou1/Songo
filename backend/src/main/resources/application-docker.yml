spring:
  application:
    name: songo-shipping-platform
  
  # Database configuration for Docker
  datasource:
    url: ${DATABASE_URL:jdbc:mysql://mysql:3306/songo_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
    username: ${DATABASE_USERNAME:songo_user}
    password: ${DATABASE_PASSWORD:songo_password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: SongoHikariPool

  # JPA/Hibernate configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: false
          use_query_cache: false

  # Redis configuration
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms

  # Mail configuration (using MailHog for testing)
  mail:
    host: ${MAIL_HOST:mailhog}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false

  # File upload configuration
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

# Server configuration
server:
  port: 8080
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# Logging configuration
logging:
  level:
    com.songo: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/songo-backend.log
    max-size: 100MB
    max-history: 30

# Application specific configuration
app:
  jwt:
    secret: ${JWT_SECRET:songoSecretKeyForJWTTokenGenerationAndValidation2024!@#$%^&*()}
    expiration: 86400000 # 24 hours
  
  cors:
    allowed-origins: 
      - http://localhost
      - http://localhost:80
      - http://localhost:4200
      - https://songo.com
      - https://www.songo.com
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  
  # Stripe configuration
  stripe:
    secret-key: ${STRIPE_SECRET_KEY:sk_test_your_stripe_secret_key}
    publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_your_stripe_publishable_key}
    webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_your_webhook_secret}
  
  # AWS configuration
  aws:
    access-key-id: ${AWS_ACCESS_KEY_ID:your_access_key}
    secret-access-key: ${AWS_SECRET_ACCESS_KEY:your_secret_key}
    region: ${AWS_REGION:us-east-1}
    s3:
      bucket-name: ${AWS_S3_BUCKET:songo-documents}
  
  # File storage configuration
  file:
    upload-dir: /app/uploads
    max-size: 10MB
    allowed-types: pdf,doc,docx,jpg,jpeg,png,gif
  
  # Email configuration
  email:
    from: noreply@songo.com
    support: support@songo.com
    templates:
      path: /app/templates/email
  
  # Cache configuration
  cache:
    default-ttl: 3600 # 1 hour
    quotes-ttl: 1800 # 30 minutes
    rates-ttl: 7200 # 2 hours
  
  # Rate limiting
  rate-limit:
    enabled: true
    requests-per-minute: 60
    requests-per-hour: 1000
  
  # Security configuration
  security:
    password:
      min-length: 8
      require-uppercase: true
      require-lowercase: true
      require-numbers: true
      require-special-chars: true
    session:
      timeout: 1800 # 30 minutes
    
  # Monitoring and health checks
  monitoring:
    enabled: true
    health-check-interval: 30s
    metrics-collection: true
