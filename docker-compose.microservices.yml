version: '3.8'

services:
  # Frontend Service (React TypeScript)
  frontend:
    build:
      context: ./frontend-v2
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_GATEWAY_URL=http://localhost:80
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - REACT_APP_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
    depends_on:
      - api-gateway
    networks:
      - songo-network

  # Quote Service (Java Spring Boot)
  quote-service:
    build:
      context: ./services/quote-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_REGION=us-east-1
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - SNS_ENDPOINT=http://localstack:4566
      - SQS_ENDPOINT=http://localstack:4566
      - FEDEX_API_KEY=${FEDEX_API_KEY}
      - UPS_API_KEY=${UPS_API_KEY}
      - DHL_API_KEY=${DHL_API_KEY}
      - USPS_API_KEY=${USPS_API_KEY}
    depends_on:
      - dynamodb-local
      - localstack
    networks:
      - songo-network

  # Tracking Service (Python FastAPI)
  tracking-service:
    build:
      context: ./services/tracking-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - AWS_REGION=us-east-1
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - FEDEX_API_KEY=${FEDEX_API_KEY}
      - UPS_API_KEY=${UPS_API_KEY}
      - DHL_API_KEY=${DHL_API_KEY}
      - USPS_API_KEY=${USPS_API_KEY}
      - CANADA_POST_API_KEY=${CANADA_POST_API_KEY}
      - PUROLATOR_API_KEY=${PUROLATOR_API_KEY}
    depends_on:
      - dynamodb-local
      - redis
    networks:
      - songo-network

  # Payment Service (Node.js TypeScript)
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=development
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - SNS_ENDPOINT=http://localstack:4566
    depends_on:
      - dynamodb-local
      - localstack
    networks:
      - songo-network

  # Notification Service (Python)
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - AWS_REGION=us-east-1
      - SNS_ENDPOINT=http://localstack:4566
      - SQS_ENDPOINT=http://localstack:4566
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    depends_on:
      - localstack
    networks:
      - songo-network

  # Admin Service (Node.js TypeScript)
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - NODE_ENV=development
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - CLOUDWATCH_ENDPOINT=http://localstack:4566
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - dynamodb-local
      - localstack
    networks:
      - songo-network

  # DynamoDB Local
  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    networks:
      - songo-network

  # LocalStack (AWS Services Emulator)
  localstack:
    container_name: localstack
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sns,sqs,lambda,eventbridge,cloudwatch,cognito-idp
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "./docker/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - songo-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - songo-network

  # Nginx API Gateway
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - quote-service
      - tracking-service
      - payment-service
      - notification-service
      - admin-service
    networks:
      - songo-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - songo-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - songo-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - songo-network

volumes:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  songo-network:
    driver: bridge
